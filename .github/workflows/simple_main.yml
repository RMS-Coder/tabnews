# Nome do workflow (opcional, mas ajuda na organização)
name: Sync Repository

# Define quando o workflow será executado
on:
  schedule:
    #- cron: '0 * * * *'  # Executa automaticamente a cada hora (no minuto 0)
    - cron: '0 1 * * *'  # Executa às 01:00 UTC, equivalente a 22h no Brasil
  workflow_dispatch:      # Permite que o workflow seja executado manualmente pelo GitHub

jobs:
  sync:
    # Define o ambiente em que o job será executado
    runs-on: ubuntu-latest

    # Permissão para modificar conteúdo do repositório (necessária para fazer push)
    permissions:
      contents: write

    steps:
      # Passo 1: Fazer o checkout (clone) do repositório alvo
      - name: Checkout target repo
        uses: actions/checkout@v4
        with:
          repository: RMS-Coder/tabnews        # Repositório de destino
          token: ${{ secrets.PAT_TOKEN }}      # Token de autenticação seguro
          fetch-depth: 0                       # Pega todo o histórico de commits

      # Passo 2: Adiciona o repositório original (upstream) como remoto
      - name: Add upstream remote
        run: |
          git remote add upstream https://github.com/RodrigoMS/clone-tabnews.git  # URL do repositório upstream
          git fetch upstream --tags  # Busca as tags e branches do upstream

      # Passo 3: Faz o merge das alterações do repositório original no destino
      - name: Merge changes
        run: |
          git config user.name "GitHub Actions"         # Configura usuário para o commit
          git config user.email "actions@github.com"    # Email genérico usado por ações
          git checkout main                             # Garante que está na branch 'main'
          git merge upstream/main --strategy-option theirs --allow-unrelated-histories  # Faz o merge priorizando o upstream
          git push origin main                          # Envia as alterações para o repositório destino
